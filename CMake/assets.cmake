
if( ${OPIFEX_OS_ANDROID} )
	
	file(COPY ${PROJECT_SOURCE_DIR}/Android/Make/AndroidManifest.xml DESTINATION ${PROJECT_BINARY_DIR}/)
	file(COPY ${PROJECT_SOURCE_DIR}/Android/Make/build.xml DESTINATION ${PROJECT_BINARY_DIR}/)
	file(COPY ${PROJECT_SOURCE_DIR}/Android/Make/Install.bat DESTINATION ${PROJECT_BINARY_DIR}/)
	file(COPY ${PROJECT_SOURCE_DIR}/Android/Java/GamePadButtonState.java DESTINATION ${PROJECT_BINARY_DIR}/src/com/opifex/SMRF/)	
	file(COPY ${PROJECT_SOURCE_DIR}/Android/Java/GamePadAxes.java DESTINATION ${PROJECT_BINARY_DIR}/src/com/opifex/SMRF/)
	file(COPY ${PROJECT_SOURCE_DIR}/Android/Java/GamePadButtons.java DESTINATION ${PROJECT_BINARY_DIR}/src/com/opifex/SMRF/)
	file(COPY ${PROJECT_SOURCE_DIR}/Android/Java/ControllerState.java DESTINATION ${PROJECT_BINARY_DIR}/src/com/opifex/SMRF/)
	file(COPY ${PROJECT_SOURCE_DIR}/Android/Java/GL2JNILib.java DESTINATION ${PROJECT_BINARY_DIR}/src/com/opifex/SMRF/)
	file(COPY ${PROJECT_SOURCE_DIR}/Android/Java/GL2JNIView.java DESTINATION ${PROJECT_BINARY_DIR}/src/com/opifex/SMRF/)
	file(COPY ${PROJECT_SOURCE_DIR}/Android/Java/OPEngine.java DESTINATION ${PROJECT_BINARY_DIR}/src/com/opifex/SMRF/)
		
	file(COPY ${PROJECT_SOURCE_DIR}/Android/Libs/ouya-sdk.jar DESTINATION ${PROJECT_BINARY_DIR}/libs/)
	
	configure_file(		${PROJECT_SOURCE_DIR}/Android/Make/Android.mk		${PROJECT_BINARY_DIR}/jni/Android.mk	)
	configure_file(		${PROJECT_SOURCE_DIR}/Android/Make/Application.mk		${PROJECT_BINARY_DIR}/jni/Application.mk	)
	configure_file(		${PROJECT_SOURCE_DIR}/Android/Make/strings.xml		${PROJECT_BINARY_DIR}/res/values/strings.xml	)
	
	copy_source_group("${PROJECT_SOURCE_DIR}/Assets/Audio" ${PROJECT_BINARY_DIR}/assets/Audio)
	copy_source_group("${PROJECT_SOURCE_DIR}/Assets/Models" ${PROJECT_BINARY_DIR}/assets/Models)
	copy_source_group("${PROJECT_SOURCE_DIR}/Assets/Textures" ${PROJECT_BINARY_DIR}/assets/Textures)
	copy_source_group("${PROJECT_SOURCE_DIR}/Assets/Fonts" ${PROJECT_BINARY_DIR}/assets/Fonts)
	copy_source_group("${PROJECT_SOURCE_DIR}/Assets/Scripts" ${PROJECT_BINARY_DIR}/assets/Scripts)
	copy_source_group("${PROJECT_SOURCE_DIR}/Assets/Sprites" ${PROJECT_BINARY_DIR}/assets/Sprites)
	copy_source_group("${PROJECT_SOURCE_DIR}/Assets/Shaders/OPENGL_ES_2_0" ${PROJECT_BINARY_DIR}/assets/Shaders)	
	copy_source_group("${PROJECT_SOURCE_DIR}/Assets/Shaders/OPENGL_ES_2_0/Common" ${PROJECT_BINARY_DIR}/assets/Shaders/Common)	
	
	copy_source_group("${PROJECT_SOURCE_DIR}/Assets/Web" ${PROJECT_BINARY_DIR}/assets/Web)	
	copy_source_group("${PROJECT_SOURCE_DIR}/Assets/Web/css" ${PROJECT_BINARY_DIR}/assets/Web/css)	
	copy_source_group("${PROJECT_SOURCE_DIR}/Assets/Web/fonts" ${PROJECT_BINARY_DIR}/assets/Web/fonts)	
	copy_source_group("${PROJECT_SOURCE_DIR}/Assets/Web/images" ${PROJECT_BINARY_DIR}/assets/Web/images)	
	copy_source_group("${PROJECT_SOURCE_DIR}/Assets/Web/js" ${PROJECT_BINARY_DIR}/assets/Web/js)	
	copy_source_group("${PROJECT_SOURCE_DIR}/Assets/Web/js/angular" ${PROJECT_BINARY_DIR}/assets/Web/angular)	
	copy_source_group("${PROJECT_SOURCE_DIR}/Assets/Web/js/angular/controllers" ${PROJECT_BINARY_DIR}/assets/Web/angular/controllers)	
	copy_source_group("${PROJECT_SOURCE_DIR}/Assets/Web/js/angular/directives" ${PROJECT_BINARY_DIR}/assets/Web/angular/directives)	
	copy_source_group("${PROJECT_SOURCE_DIR}/Assets/Web/js/angular/filters" ${PROJECT_BINARY_DIR}/assets/Web/angular/filters)	
	copy_source_group("${PROJECT_SOURCE_DIR}/Assets/Web/js/angular/services" ${PROJECT_BINARY_DIR}/assets/Web/angular/services)	

	file(COPY ${PROJECT_SOURCE_DIR}/External/Ogg/lib/debug/android/libogg.a DESTINATION ${PROJECT_BINARY_DIR}/Binaries/android)
	file(COPY ${PROJECT_SOURCE_DIR}/External/Vorbis/lib/debug/android/libvorbis.a DESTINATION ${PROJECT_BINARY_DIR}/Binaries/android)

	file(COPY ${PROJECT_SOURCE_DIR}/External/PhysX/Lib/release/android/libPhysX3Common.a 	DESTINATION 	${PROJECT_BINARY_DIR}/Binaries/android)
	file(COPY ${PROJECT_SOURCE_DIR}/External/PhysX/Lib/release/android/libPvdRuntime.a 	DESTINATION 	${PROJECT_BINARY_DIR}/Binaries/android)
	file(COPY ${PROJECT_SOURCE_DIR}/External/PhysX/Lib/release/android/libSimulationController.a 	DESTINATION 	${PROJECT_BINARY_DIR}/Binaries/android)
	file(COPY ${PROJECT_SOURCE_DIR}/External/PhysX/Lib/release/android/libSceneQuery.a 	DESTINATION 	${PROJECT_BINARY_DIR}/Binaries/android)
	file(COPY ${PROJECT_SOURCE_DIR}/External/PhysX/Lib/release/android/libLowLevel.a 	DESTINATION 	${PROJECT_BINARY_DIR}/Binaries/android)
	file(COPY ${PROJECT_SOURCE_DIR}/External/PhysX/Lib/release/android/libLowLevelCloth.a 	DESTINATION 	${PROJECT_BINARY_DIR}/Binaries/android)
	file(COPY ${PROJECT_SOURCE_DIR}/External/PhysX/Lib/release/android/libPhysX3.a 	DESTINATION 	${PROJECT_BINARY_DIR}/Binaries/android)
	file(COPY ${PROJECT_SOURCE_DIR}/External/PhysX/Lib/release/android/libPhysX3Vehicle.a 	DESTINATION 	${PROJECT_BINARY_DIR}/Binaries/android)
	file(COPY ${PROJECT_SOURCE_DIR}/External/PhysX/Lib/release/android/libPhysX3Cooking.a 	DESTINATION 	${PROJECT_BINARY_DIR}/Binaries/android)
	file(COPY ${PROJECT_SOURCE_DIR}/External/PhysX/Lib/release/android/libPhysX3Extensions.a 	DESTINATION 	${PROJECT_BINARY_DIR}/Binaries/android)
	file(COPY ${PROJECT_SOURCE_DIR}/External/PhysX/Lib/release/android/libPhysX3CharacterKinematic.a 	DESTINATION 	${PROJECT_BINARY_DIR}/Binaries/android)
	file(COPY ${PROJECT_SOURCE_DIR}/External/PhysX/Lib/release/android/libPhysXProfileSDK.a 	DESTINATION 	${PROJECT_BINARY_DIR}/Binaries/android)
	file(COPY ${PROJECT_SOURCE_DIR}/External/PhysX/Lib/release/android/libPxTask.a 	DESTINATION 	${PROJECT_BINARY_DIR}/Binaries/android)
	file(COPY ${PROJECT_SOURCE_DIR}/External/PhysX/Lib/release/android/libPhysXVisualDebuggerSDK.a 	DESTINATION 	${PROJECT_BINARY_DIR}/Binaries/android)
	
else()

	if(${OPIFEX_NODEJS})
		configure_file(		${PROJECT_SOURCE_DIR}/NodeJs/binding.gyp		${PROJECT_BINARY_DIR}/binding.gyp	)
		file(COPY 			${PROJECT_SOURCE_DIR}/NodeJs/Wrapper.cpp DESTINATION ${PROJECT_BINARY_DIR}/)
	endif()

	copy_source_group("${PROJECT_SOURCE_DIR}/Assets/Audio" ${PROJECT_BINARY_DIR}/Application/assets/Audio)	
	copy_source_group("${PROJECT_SOURCE_DIR}/Assets/Models" ${PROJECT_BINARY_DIR}/Application/assets/Models)	
	copy_source_group("${PROJECT_SOURCE_DIR}/Assets/Textures" ${PROJECT_BINARY_DIR}/Application/assets/Textures)	
	copy_source_group("${PROJECT_SOURCE_DIR}/Assets/Fonts" ${PROJECT_BINARY_DIR}/Application/assets/Fonts)	
	copy_source_group("${PROJECT_SOURCE_DIR}/Assets/Sprites" ${PROJECT_BINARY_DIR}/Application/assets/Sprites)	
	copy_source_group("${PROJECT_SOURCE_DIR}/Assets/Scripts" ${PROJECT_BINARY_DIR}/Application/assets/Scripts)	
	copy_source_group("${PROJECT_SOURCE_DIR}/Assets/Shaders/${OPENGL_DESKTOP_TARGET}" ${PROJECT_BINARY_DIR}/Application/assets/Shaders)	
	copy_source_group("${PROJECT_SOURCE_DIR}/Assets/Shaders/${OPENGL_DESKTOP_TARGET}/Common" ${PROJECT_BINARY_DIR}/Application/assets/Shaders/Common)
	copy_source_group("${PROJECT_SOURCE_DIR}/Assets/Web" ${PROJECT_BINARY_DIR}/Application/assets/Web)	
	copy_source_group("${PROJECT_SOURCE_DIR}/Assets/Web/css" ${PROJECT_BINARY_DIR}/Application/assets/Web/css)	
	copy_source_group("${PROJECT_SOURCE_DIR}/Assets/Web/fonts" ${PROJECT_BINARY_DIR}/Application/assets/Web/fonts)	
	copy_source_group("${PROJECT_SOURCE_DIR}/Assets/Web/images" ${PROJECT_BINARY_DIR}/Application/assets/Web/images)	
	copy_source_group("${PROJECT_SOURCE_DIR}/Assets/Web/js" ${PROJECT_BINARY_DIR}/Application/assets/Web/js)	
	copy_source_group("${PROJECT_SOURCE_DIR}/Assets/Web/js/angular" ${PROJECT_BINARY_DIR}/Application/assets/Web/angular)	
	copy_source_group("${PROJECT_SOURCE_DIR}/Assets/Web/js/angular/controllers" ${PROJECT_BINARY_DIR}/Application/assets/Web/angular/controllers)	
	copy_source_group("${PROJECT_SOURCE_DIR}/Assets/Web/js/angular/directives" ${PROJECT_BINARY_DIR}/Application/assets/Web/angular/directives)	
	copy_source_group("${PROJECT_SOURCE_DIR}/Assets/Web/js/angular/filters" ${PROJECT_BINARY_DIR}/Application/assets/Web/angular/filters)	
	copy_source_group("${PROJECT_SOURCE_DIR}/Assets/Web/js/angular/services" ${PROJECT_BINARY_DIR}/Application/assets/Web/angular/services)	

endif()
