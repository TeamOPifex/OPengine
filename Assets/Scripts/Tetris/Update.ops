
////////
// MENU
///////////////////////////
function MenuState() {

}

MenuState.prototype = {
	manager: null,
	assets: {},

	
	Initialize: function() {
		OP.cman.Load('comicbook.opf');
		this.assets['font'] = OP.cman.Get('comicbook.opf');
		
		this.manager = OP.font.CreateManager(content['font']);
		this.manager.SetRGBA(1,0,0,1);
		this.manager.SetAlign(1);
		this.manager.Bind();
		this.manager.Build();
		//console.log(this.manager);
	},
	
	Update: function(elapsed) {			
		OP.Clear(0.2,0.2,0.2);
		OP.Depth(1);
		
		//console.log(OP.font.RenderText);
		OP.font.RenderText('TEST', 0.1, 0.1);

		OP.Present();
		
		return 0;
	},
	
	Destroy: function() {
		
	}
};

////////
// GAME SETUP
///////////////////////////

var content = {}, camera, world;
var rotX = 0, rotZ = 0, rotY = 0;
var posX = 0, posY = 0, posZ = 0;

var state = null;

function Attribute(name, size) { return { Id: name, Size: size }; }

function Initialize() {
	OP.cman.Init('assets/');
	OP.render.Init(function(result) {
		OP.cman.Load('PuzzleBlock.opm');
		OP.cman.Load('PuzzleBlockGear.png');
		OP.cman.Load('TexturedModel.frag');
		OP.cman.Load('TexturedModel.vert');
		
		content['model'] = OP.cman.Get('PuzzleBlock.opm');
		content['image'] = OP.cman.Get('PuzzleBlockGear.png');
		content['frag'] = OP.cman.Get('TexturedModel.frag');
		content['vert'] = OP.cman.Get('TexturedModel.vert');
		
		content['effect'] = OP.effect.Create({
			Name: 'Model Effect', 
			Vertex: content['vert'],
			Fragment: content['frag'],
			Attributes: [ Attribute('aPosition', 3), Attribute('aNormal', 3), Attribute('aUV', 2) ] 
		});
		
		OP.font.Init();
				
		camera = OP.camera.Create(0,0,5);		
		world = OP.mat4.Create();
		
		state = new MenuState();
		state.Initialize();
		
	});
}

function Update(elapsed) {
	OP.input.Update();
	
	if(state) {
		//console.log('update');
		return state.Update(elapsed);
	}
		
	return 0;
}

function Destroy() {

}

OP.Start(Initialize, Update, Destroy);